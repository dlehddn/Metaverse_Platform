using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class Rhino : MonoBehaviour
{
    public GameObject rhinoname; // 코뿔소 이름 UI
    public GameObject rhinopopup; // 퀘스트성공 UI
                                 // public GameObject rhinoname; // 코뿔소 이름 UI

    [SerializeField] private float walkSpeed;  // 걷기 속력

    private Vector3 direction;  // 방향

    // 상태 변수
    private bool isAction;  // 행동 중인지 아닌지 판별
    private bool isWalking; // 걷는지, 안 걷는지 판별
    private bool isDie;
    private bool pastDie;

    [SerializeField] private float walkTime;  // 걷기 시간
    [SerializeField] private float waitTime;  // 대기 시간
    private float currentTime;

    // 필요한 컴포넌트
    [SerializeField] private Animator anim;
    [SerializeField] private Rigidbody rigidl;
    [SerializeField] private BoxCollider boxCol;

    void Start()
    {
        currentTime = waitTime;   // 대기 시작
        isAction = true;   // 대기도 행동
        isDie = false;
        pastDie = true;
    }

    void Update()
    {
        Move();
        Rotation();
        ElapseTime();
        RhinoDie();
    }

    private void Move()
    {
        if (isWalking)
            rigidl.MovePosition(transform.position + transform.forward * walkSpeed * Time.deltaTime);
    }

    private void Rotation()
    {
        if (isWalking)
        {
            Vector3 _rotation = Vector3.Lerp(transform.eulerAngles, direction, 0.01f);
            rigidl.MoveRotation(Quaternion.Euler(_rotation));
        }
    }

    private void ElapseTime()
    {
        if (isAction)
        {
            currentTime -= Time.deltaTime;
            if (currentTime <= 0)  // 랜덤하게 다음 행동을 개시
                ReSet();
        }
    }

    private void ReSet()  // 다음 행동 준비
    {
        isWalking = false;
        isAction = true;
        anim.SetBool("Walking", isWalking);

        direction.Set(0f, Random.Range(0f, 360f), 0f);

        RandomAction();
    }

    private void RhinoDie()
    {
        if(!pastDie && isDie)
        {
            transform.Rotate(new Vector3(0, 0, 90));
            pastDie = true;
            anim.SetBool("Die", true);
            rhinoname.SetActive(false);
            rhinopopup.SetActive(true);
        }
    }

    private void RandomAction()
    {
        int _random = Random.Range(0, 4); // 대기, 걷기

        if (_random == 0)
            Wait();
        else if (_random == 1)
            TryWalk();
        else if (_random == 2)
            TryWalk();
        else if (_random == 3)
            TryWalk();
    }

    private void Wait()  // 대기
    {
        currentTime = waitTime;
        Debug.Log("대기");
    }


    private void TryWalk()  // 걷기
    {
        currentTime = walkTime;
        isWalking = true;
        anim.SetBool("Walking", isWalking);
        Debug.Log("걷기");
    }

    private void OnCollisionEnter(Collision col) // void Die()
    {
        if(col.gameObject.name == "stone")
            {
            isWalking = false;
            isAction = false;
            isDie = true;
            pastDie = false;
            Debug.Log("hit");
            //this.gameObject.GetComponent<Renderer>().material.color = new Color(251, 197, 181);
        }
    }
}
